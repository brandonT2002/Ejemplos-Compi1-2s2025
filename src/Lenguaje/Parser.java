
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Lenguaje;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Arrays;
import Clases.Errores.ErrorSintactico;
import Clases.Abstractas.Instruccion;
import Clases.Instrucciones.GuardarAutomata;
import Clases.Instrucciones.verAutomatas;
import Clases.Instrucciones.Descripcion;
import Clases.Objetos.Regla;
import Clases.Objetos.Transicion;
import Clases.Objetos.CuerpoAFD;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Terminal.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\005\000" +
    "\002\007\010\000\002\010\006\000\002\006\006\000\002" +
    "\011\004\000\002\011\003\000\002\012\010\000\002\013" +
    "\005\000\002\013\003\000\002\015\004\000\002\015\003" +
    "\000\002\016\010\000\002\014\003\000\002\014\003\000" +
    "\002\017\006\000\002\020\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\012\003\013\013\007\025\016\026\014\001" +
    "\002\000\014\002\ufffe\003\ufffe\013\ufffe\025\ufffe\026\ufffe" +
    "\001\002\000\004\005\037\001\002\000\014\002\ufffb\003" +
    "\ufffb\013\ufffb\025\ufffb\026\ufffb\001\002\000\004\023\030" +
    "\001\002\000\014\002\ufffc\003\ufffc\013\ufffc\025\ufffc\026" +
    "\ufffc\001\002\000\004\002\027\001\002\000\014\002\000" +
    "\003\013\013\007\025\016\026\014\001\002\000\014\002" +
    "\ufffa\003\ufffa\013\ufffa\025\ufffa\026\ufffa\001\002\000\004" +
    "\027\022\001\002\000\014\002\ufffd\003\ufffd\013\ufffd\025" +
    "\ufffd\026\ufffd\001\002\000\004\027\017\001\002\000\004" +
    "\030\020\001\002\000\004\016\021\001\002\000\014\002" +
    "\uffeb\003\uffeb\013\uffeb\025\uffeb\026\uffeb\001\002\000\004" +
    "\005\023\001\002\000\004\030\024\001\002\000\004\016" +
    "\025\001\002\000\014\002\uffea\003\uffea\013\uffea\025\uffea" +
    "\026\uffea\001\002\000\014\002\uffff\003\uffff\013\uffff\025" +
    "\uffff\026\uffff\001\002\000\004\002\001\001\002\000\004" +
    "\024\031\001\002\000\004\007\032\001\002\000\004\006" +
    "\033\001\002\000\004\014\034\001\002\000\004\005\ufff8" +
    "\001\002\000\004\013\070\001\002\000\006\005\037\012" +
    "\053\001\002\000\004\007\041\001\002\000\006\005\ufff4" +
    "\012\ufff4\001\002\000\004\010\042\001\002\000\006\004" +
    "\044\005\045\001\002\000\006\011\050\015\047\001\002" +
    "\000\006\011\uffec\015\uffec\001\002\000\006\011\uffed\015" +
    "\uffed\001\002\000\006\011\ufff1\015\ufff1\001\002\000\006" +
    "\004\044\005\045\001\002\000\004\016\051\001\002\000" +
    "\006\005\ufff3\012\ufff3\001\002\000\006\011\ufff2\015\ufff2" +
    "\001\002\000\004\021\055\001\002\000\006\005\ufff5\012" +
    "\ufff5\001\002\000\004\005\060\001\002\000\006\005\060" +
    "\013\ufff6\001\002\000\006\005\uffef\013\uffef\001\002\000" +
    "\004\020\061\001\002\000\006\004\044\005\045\001\002" +
    "\000\004\015\063\001\002\000\004\005\064\001\002\000" +
    "\004\016\065\001\002\000\006\005\uffee\013\uffee\001\002" +
    "\000\006\005\ufff0\013\ufff0\001\002\000\014\002\ufff9\003" +
    "\ufff9\013\ufff9\025\ufff9\026\ufff9\001\002\000\004\022\071" +
    "\001\002\000\004\023\072\001\002\000\004\014\073\001" +
    "\002\000\014\002\ufff7\003\ufff7\013\ufff7\025\ufff7\026\ufff7" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\071\000\020\002\010\003\011\004\003\005\014\007" +
    "\004\017\007\020\005\001\001\000\002\001\001\000\010" +
    "\006\034\011\035\012\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\025\005\014\007\004\017\007\020\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\066\001\001\000" +
    "\004\012\053\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\042\014\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\051\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\055\016\056\001\001\000\004\016" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Código Java
    // Lista errores sintácticos
    public ArrayList<ErrorSintactico> erroresSintacticos = new ArrayList<>();
    public void syntax_error(Symbol sym) {
        erroresSintacticos.add(new ErrorSintactico(sym.left,sym.right,sym.value,Terminal.terminalNames[sym.sym]));
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {
        erroresSintacticos.add(new ErrorSintactico("Error Sintáctico sin recuperar."));
    }

    public static ArrayList<Instruccion> instrucciones;


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INSTRUCCIONES 
            {
              Object RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Instruccion> lista = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 instrucciones = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCIONES ::= INSTRUCCIONES INSTRUCCION 
            {
              ArrayList<Instruccion> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruccion> lista = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lista; RESULT.add(instruccion); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCIONES ::= INSTRUCCION 
            {
              ArrayList<Instruccion> RESULT =null;
		int instruccionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int instruccionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion instruccion = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(Arrays.asList(instruccion)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= AFD 
            {
              Instruccion RESULT =null;
		int afdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int afdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		GuardarAutomata afd = (GuardarAutomata)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = afd; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= VER_AUTOMATA 
            {
              Instruccion RESULT =null;
		int funcionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funcionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		verAutomatas funcion = (verAutomatas)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = funcion; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= DESCRIPCION_ATM 
            {
              Instruccion RESULT =null;
		int descripcionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int descripcionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Descripcion descripcion = (Descripcion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = descripcion; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= error 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // AFD ::= APERTURA_AFD CUERPO_AFD CIERRE_AFD 
            {
              GuardarAutomata RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		CuerpoAFD cuerpo = (CuerpoAFD)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new GuardarAutomata(nombre, "AFD", cuerpo); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AFD",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // APERTURA_AFD ::= TK_menor_que TK_afd TK_nombre TK_asignacion TK_cadena TK_mayor_que 
            {
              String RESULT =null;
		int nombreAFDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nombreAFDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String nombreAFD = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = nombreAFD; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("APERTURA_AFD",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CIERRE_AFD ::= TK_menor_que TK_division TK_afd TK_mayor_que 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CIERRE_AFD",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO_AFD ::= REGLAS TK_transicion TK_dos_puntos TRANSICIONES 
            {
              CuerpoAFD RESULT =null;
		int reglasleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int reglasright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<Regla> reglas = (ArrayList<Regla>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int transicionesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int transicionesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Transicion> transiciones = (ArrayList<Transicion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new CuerpoAFD(reglas, transiciones); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CUERPO_AFD",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // REGLAS ::= REGLAS REGLA 
            {
              ArrayList<Regla> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Regla> lista = (ArrayList<Regla>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int reglaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reglaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Regla regla = (Regla)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = lista; lista.add(regla); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REGLAS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // REGLAS ::= REGLA 
            {
              ArrayList<Regla> RESULT =null;
		int reglaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int reglaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Regla regla = (Regla)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(Arrays.asList(regla)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REGLAS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // REGLA ::= TK_id TK_asignacion TK_llave_izquierda ELEMENTOS TK_llave_derecha TK_punto_y_coma 
            {
              Regla RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int elementosleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int elementosright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> elementos = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Regla(id, elementos); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REGLA",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ELEMENTOS ::= ELEMENTOS TK_coma ELEMENTO 
            {
              ArrayList<String> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> lista = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elementoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elementoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String elemento = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lista; RESULT.add(elemento); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ELEMENTOS ::= ELEMENTO 
            {
              ArrayList<String> RESULT =null;
		int elementoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elementoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String elemento = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(Arrays.asList(elemento)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEMENTOS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TRANSICIONES ::= TRANSICIONES TRANSICION 
            {
              ArrayList<Transicion> RESULT =null;
		int listaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Transicion> lista = (ArrayList<Transicion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int transicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int transicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Transicion transicion = (Transicion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = lista; RESULT.add(transicion); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TRANSICIONES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TRANSICIONES ::= TRANSICION 
            {
              ArrayList<Transicion> RESULT =null;
		int transicionleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int transicionright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Transicion transicion = (Transicion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(Arrays.asList(transicion)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TRANSICIONES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TRANSICION ::= TK_id TK_flecha ELEMENTO TK_coma TK_id TK_punto_y_coma 
            {
              Transicion RESULT =null;
		int origenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int origenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String origen = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int simbololeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int simboloright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String simbolo = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int destinoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int destinoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String destino = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                Transicion transicion = new Transicion(origen);
                transicion.agregarTransicion(simbolo, destino);
                RESULT = transicion;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TRANSICION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ELEMENTO ::= TK_id 
            {
              String RESULT =null;
		int elementoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elementoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String elemento = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = elemento; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEMENTO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ELEMENTO ::= TK_numero 
            {
              String RESULT =null;
		int elementoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elementoright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String elemento = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = elemento; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELEMENTO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VER_AUTOMATA ::= TK_verAutomatas TK_parentesis_izquierdo TK_parentesis_derecho TK_punto_y_coma 
            {
              verAutomatas RESULT =null;
		 RESULT = new verAutomatas(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VER_AUTOMATA",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DESCRIPCION_ATM ::= TK_desc TK_parentesis_izquierdo TK_id TK_parentesis_derecho TK_punto_y_coma 
            {
              Descripcion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Descripcion(id); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DESCRIPCION_ATM",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
