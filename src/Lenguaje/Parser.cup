// === 1. Package e imports ===
package Lenguaje;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.Arrays;
import Clases.Errores.ErrorSintactico;

import Clases.Abstractas.Instruccion;
import Clases.Instrucciones.GuardarAutomata;

// === configuración ===
parser code
{:
    // Código Java
    // Lista errores sintácticos
    public ArrayList<ErrorSintactico> erroresSintacticos = new ArrayList<>();
    public void syntax_error(Symbol sym) {
        erroresSintacticos.add(new ErrorSintactico(sym.left,sym.right,sym.value,Terminal.terminalNames[sym.sym]));
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {
        erroresSintacticos.add(new ErrorSintactico("Error Sintáctico sin recuperar."));
    }

    public static ArrayList<Instruccion> instrucciones;
:}

// === terminales
terminal String TK_numero, TK_id, TK_cadena, TK_asignacion, TK_llave_izquierda, TK_llave_derecha, TK_transicion, TK_menor_que, TK_mayor_que, TK_coma, TK_punto_y_coma, TK_pipe, TK_flecha, TK_dos_puntos, TK_division, TK_afd, TK_nombre, TK_verAutomatas, TK_desc, TK_parentesis_izquierdo, TK_parentesis_derecho;

// === no terminales ===
non terminal INICIO;
non terminal ArrayList<Instruccion> INSTRUCCIONES;
non terminal Instruccion INSTRUCCION;
non terminal GuardarAutomata AFD;
non terminal String CUERPO_AFD;
non terminal String APERTURA_AFD;
non terminal String CIERRE_AFD;
non terminal String REGLAS;
non terminal String REGLA;
non terminal String ELEMENTOS;
non terminal String ELEMENTO;
non terminal String TRANSICIONES;
non terminal String TRANSICION;
non terminal String FUNCIONES;
non terminal String FUNCION;

// === presedencia de operadores ===

// === Gramatica ===
start with INICIO;

// INICIO DE LA GRAMATICA
INICIO ::= INSTRUCCIONES:lista {: instrucciones = lista; :} ;

INSTRUCCIONES ::= INSTRUCCIONES :lista INSTRUCCION :instruccion {: RESULT = lista; RESULT.add(instruccion); :} |
                INSTRUCCION :instruccion                 {: RESULT = new ArrayList<>(Arrays.asList(instruccion)); :} ;

INSTRUCCION  ::= AFD :afd {: RESULT = afd; :} |
                FUNCION |
                error ;

// DELCARACIÓN DE AFD
AFD ::= APERTURA_AFD :afd CUERPO_AFD CIERRE_AFD {: RESULT = new GuardarAutomata(afd); :};

APERTURA_AFD ::= TK_menor_que TK_afd TK_nombre TK_asignacion TK_cadena :nombreAFD TK_mayor_que {: RESULT = nombreAFD; :};
CIERRE_AFD ::= TK_menor_que TK_division TK_afd TK_mayor_que;

CUERPO_AFD ::= REGLAS TK_transicion TK_dos_puntos TRANSICIONES ;

// REGLAS (Estados, alfabeto, estado inicial, estados de aceptación)
REGLAS ::= REGLAS REGLA |
            REGLA       ;

REGLA ::= TK_id TK_asignacion TK_llave_izquierda ELEMENTOS TK_llave_derecha TK_punto_y_coma ;

ELEMENTOS ::= ELEMENTOS TK_coma ELEMENTO |
            ELEMENTO                     ;

// TRANSICIONES
TRANSICIONES ::= TRANSICIONES TRANSICION |
                TRANSICION               ;

TRANSICION ::= TK_id TK_flecha ELEMENTO TK_coma TK_id TK_punto_y_coma ;

// ELEMENTOS
ELEMENTO ::= TK_id    |
            TK_numero ;

// FUNCIONES DEL SISTEMA

FUNCION ::= TK_verAutomatas TK_parentesis_izquierdo TK_parentesis_derecho TK_punto_y_coma |
            TK_desc TK_parentesis_izquierdo TK_id TK_parentesis_derecho TK_punto_y_coma   |
            TK_id TK_parentesis_izquierdo TK_cadena TK_parentesis_derecho TK_punto_y_coma ;